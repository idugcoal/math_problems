import os
import jinja2
from jinja2 import Template
import math

latex_jinja_env = jinja2.Environment(
  block_start_string = '\BLOCK{',
  block_end_string = '}',
  variable_start_string = '\VAR{', 
  variable_end_string = '}',
  comment_start_string = '\#{',
  comment_end_string = '}',
  line_statement_prefix = '%%',
  line_comment_prefix = '%#',
  trim_blocks = True,
  autoescape = False,
  loader = jinja2.FileSystemLoader(os.path.abspath('.'))
)

pythag_triples = [
  {'a': 3, 'b': 4, 'c': 5, 'multi_range': {'min': 1, 'max': 20}},
  {'a': 5, 'b': 12, 'c': 13, 'multi_range': {'min': 1, 'max': 5}},
  {'a': 8, 'b': 15, 'c': 17, 'multi_range': {'min': 1, 'max': 4}},
  {'a': 7, 'b': 24, 'c': 25, 'multi_range': {'min': 1, 'max': 3}},
  {'a': 20, 'b': 21, 'c': 29, 'multi_range': {'min': 1, 'max': 3}},
  {'a': 12, 'b': 35, 'c': 37, 'multi_range': {'min': 1, 'max': 1}},
  {'a': 9, 'b': 40, 'c': 41, 'multi_range': {'min': 1, 'max': 1}},
  {'a': 28, 'b': 45, 'c': 5, 'multi_range': {'min': 1, 'max': 1}},
  {'a': 11, 'b': 60, 'c': 61, 'multi_range': {'min': 1, 'max': 1}},
  {'a': 16, 'b': 63, 'c': 65, 'multi_range': {'min': 1, 'max': 1}},
  {'a': 48, 'b': 55, 'c': 73, 'multi_range': {'min': 1, 'max': 1}},
  {'a': 13, 'b': 84, 'c': 84, 'multi_range': {'min': 1, 'max': 1}},
  {'a': 36, 'b': 77, 'c': 85, 'multi_range': {'min': 1, 'max': 1}},
  {'a': 39, 'b': 80, 'c': 89, 'multi_range': {'min': 1, 'max': 1}},
  {'a': 65, 'b': 72, 'c': 97, 'multi_range': {'min': 1, 'max': 1}},
]



formulas_a = {
  1: 'math.radians(math.sin(a / b))',
  2: 'math.radians(math.sin(a / c))',
  3: 'math.radians(math.sin(b / a))',
  4: 'math.radians(math.sin(b / c))',
  5: 'math.radians(math.sin(c / a))',
  6: 'math.radians(math.sin(c / b))',
  7: 'math.degrees(math.asin(a / b))',
  8: 'math.degrees(math.asin(a / c))',
  9: 'math.degrees(math.asin(b / a))',
  10: 'math.degrees(math.asin(b / c))',
  11: 'math.degrees(math.asin(c / a))',
  12: 'math.degrees(math.asin(c / b))',
  13: 'a / math.sin(math.radians(o1))',
  14: 'a / math.cos(math.radians(o1))',
  15: 'a / math.tan(math.radians(o1))',
  16: 'a / math.sin(math.radians(o2))',
  17: 'a / math.cos(math.radians(o2))',
  18: 'a / math.tan(math.radians(o2))',
  19: 'math.radians(math.cos(a / b))',
  20: 'math.radians(math.cos(a / c))',
  21: 'math.radians(math.cos(b / a))',
  22: 'math.radians(math.cos(b / c))',
  23: 'math.radians(math.cos(c / a))',
  24: 'math.radians(math.cos(c / b))',
  25: 'math.degrees(math.acos(a / b))',
  26: 'math.degrees(math.acos(a / c))',
  27: 'math.degrees(math.acos(b / a))',
  28: 'math.degrees(math.acos(b / c))',
  29: 'math.degrees(math.acos(c / a))',
  30: 'math.degrees(math.acos(c / b))',
  31: 'b / math.sin(math.radians(o1))',
  32: 'b / math.cos(math.radians(o1))',
  33: 'b / math.tan(math.radians(o1))',
  34: 'b / math.sin(math.radians(o2))',
  35: 'b / math.cos(math.radians(o2))',
  36: 'b / math.tan(math.radians(o2))',
  37: 'math.radians(math.tan(a / b))',
  38: 'math.radians(math.tan(a / c))',
  39: 'math.radians(math.tan(b / a))',
  40: 'math.radians(math.tan(b / c))',
  41: 'math.radians(math.tan(c / a))',
  42: 'math.radians(math.tan(c / b))',
  43: 'math.degrees(math.atan(a / b))',
  44: 'math.degrees(math.atan(a / c))',
  45: 'math.degrees(math.atan(b / a))',
  46: 'math.degrees(math.atan(b / c))',
  47: 'math.degrees(math.atan(c / a))',
  48: 'math.degrees(math.atan(c / b))',
  49: 'c / math.sin(math.radians(o1))',
  50: 'c / math.cos(math.radians(o1))',
  51: 'c / math.tan(math.radians(o1))',
  52: 'c / math.sin(math.radians(o2))',
  53: 'c / math.cos(math.radians(o2))',
  54: 'c / math.tan(math.radians(o2))',
  55: 'math.sqrt(math.pow(c, 2) - math.pow(b, 2))',
  56: 'math.sqrt(math.pow(c, 2) - math.pow(a, 2))',
  57: 'a * math.radians(math.sin(o1))',
  58: 'a * math.radians(math.cos(o1))',
  59: 'a * math.radians(math.tan(o1))',
  60: 'b * math.radians(math.sin(o1))',
  61: 'b * math.radians(math.cos(o1))',
  62: 'b * math.radians(math.tan(o1))',
  63: 'c * math.radians(math.sin(o1))',
  64: 'c * math.radians(math.cos(o1))',
  65: 'c * math.radians(math.tan(o1))',
  66: 'a * math.radians(math.sin(o2))',
  67: 'a * math.radians(math.cos(o2))',
  68: 'a * math.radians(math.tan(o2))',
  69: 'b * math.radians(math.sin(o2))',
  70: 'b * math.radians(math.cos(o2))',
  71: 'b * math.radians(math.tan(o2))',
  72: 'c * math.radians(math.sin(o2))',
  73: 'c * math.radians(math.cos(o2))',
  74: 'c * math.radians(math.tan(o2))',
  75: 'math.sqrt(math.pow(a, 2) + math.pow(b, 2))',
  76: 'math.sqrt(math.pow(c, 2) - math.pow(b, 2))',
  77: 'math.sqrt(math.pow(c, 2) - math.pow(a, 2))',
  78: '90 - o1',
  79: '90 - o2',
  80: 'math.sqrt(math.fabs(math.pow(a, 2) - math.pow(b, 2)))',
  81: 'a + b',
  82: 'math.pow(a, 2) + math.pow(b, 2)',
  83: 'math.sqrt(math.pow(a, 2)) + math.sqrt(math.pow(b, 2))',
  84: 'math.sqrt(math.pow(c, 2) + math.pow(b, 2))',
  85: 'math.pow(c, 2) - math.pow(b, 2)',
  86: 'math.sqrt(math.pow(c, 2) + math.pow(a, 2))',
  87: 'math.pow(c, 2) - math.pow(a, 2)',
  88: '90 - o1',
  89: '90 + o1',
  90: '45',
  91: '180 - o1',
  92: '90 - o2',
  93: '90 + o2',
  94: '180 - o2'
}

formulas_al = {
  'cml': {
    0: '(c * m) / 360',
    1: 'c * m - 360',
    2: 'm / (360 * c)',
    3: '360 / (c * m)',
  },
  'rml': {  
    0: '(2 * math.pi * r * m) / 360',
    1: '(r * m) / 360',
    2: '360 / (2 * math.pi * r * m)',
    3: '(2 * math.pi * r * m) - 360',
  },
  'dml': {
    0: '(math.pi * d * m) / 360',
    1: '360 / (math.pi * d * m)',
    2: '(math.pi * d * m) - 360',
    3: '(d * m) / 360',
  },
  'lcm': {
    0: '(l * 360) / c',
    1: 'c / (l *360)',
    2: '(l * 360) - c',
    3: '(c * 360) / l',
  },
  'lrm': {
    0: '(l * 360) / (2 * math.pi * r)',
    1: '(2 * math.pi * r) / (l * 360)',
    2: '(l * 360) - (2 * math.pi * r)',
    3: '(l * 360) / r',
  },
  'ldm': {
    0: '(l * 360) / (math.pi * d)',
    1: '(math.pi * d) / (l * 360)',
    2: '(l * 360) - (math.pi * d)',
    3: '(l * 360) / d',
  },
  'lmc': {
    0: '(l * 360) / m',
    1: 'm / (l * 360)',
    2: '(l * 360) - m',
    3: '(m * 360) / l',
  },
  'lmr': {
    0: '(l * 360) / (2 * math.pi * m)',
    1: '(2 * math.pi * m) / (l * 360)',
    2: '(l * 360) - (2 * math.pi * m)',
    3: '(m * 360) / (2 * math.pi * l)',
  },
  'lmd': {
    0: '(l * 360) / (math.pi * m)',
    1: '(math.pi * m) / (l * 360)',
    2: '(l * 360) - (math.pi * m)',
    3: '(m * 360) / (math.pi * l)'
  }
}

formulas_q = [
  [
    ['sin', 'positive', 'cos', 'positive'],
    ['sin', 'positive', 'sec', 'positive'],
    ['sin', 'positive', 'tan', 'positive'],
    ['sin', 'positive', 'cot', 'positive'],
    ['csc', 'positive', 'cos', 'positive'],
    ['csc', 'positive', 'sec', 'positive'],
    ['csc', 'positive', 'tan', 'positive'],
    ['csc', 'positive', 'cot', 'positive'],
    ['cos', 'positive', 'sin', 'positive'],
    ['cos', 'positive', 'csc', 'positive'],
    ['cos', 'positive', 'tan', 'positive'],
    ['cos', 'positive', 'cot', 'positive'],
    ['sec', 'positive', 'sin', 'positive'],
    ['sec', 'positive', 'csc', 'positive'],
    ['sec', 'positive', 'tan', 'positive'],
    ['sec', 'positive', 'cot', 'positive'],
    ['tan', 'positive', 'sin', 'positive'],
    ['tan', 'positive', 'csc', 'positive'],
    ['tan', 'positive', 'cos', 'positive'],
    ['tan', 'positive', 'sec', 'positive'],
    ['cot', 'positive', 'sin', 'positive'],
    ['cot', 'positive', 'csc', 'positive'],
    ['cot', 'positive', 'cos', 'positive'],
    ['cot', 'positive', 'sec', 'positive'],
  ],
  [
    ['sin', 'positive', 'cos', 'negative'],
    ['sin', 'positive', 'sec', 'negative'],
    ['sin', 'positive', 'tan', 'negative'],
    ['sin', 'positive', 'cot', 'negative'],
    ['csc', 'positive', 'cos', 'negative'],
    ['csc', 'positive', 'sec', 'negative'],
    ['csc', 'positive', 'tan', 'negative'],
    ['csc', 'positive', 'cot', 'negative'],
    ['cos', 'negative', 'sin', 'positive'],
    ['cos', 'negative', 'csc', 'positive'],
    ['cos', 'negative', 'tan', 'negative'],
    ['cos', 'negative', 'cot', 'negative'],
    ['sec', 'negative', 'sin', 'positive'],
    ['sec', 'negative', 'csc', 'positive'],
    ['sec', 'negative', 'tan', 'negative'],
    ['sec', 'negative', 'cot', 'negative'],
    ['tan', 'negative', 'sin', 'positive'],
    ['tan', 'negative', 'csc', 'positive'],
    ['tan', 'negative', 'cos', 'negative'],
    ['tan', 'negative', 'sec', 'negative'],
    ['cot', 'negative', 'sin', 'positive'],
    ['cot', 'negative', 'csc', 'positive'],
    ['cot', 'negative', 'cos', 'negative'],
    ['cot', 'negative', 'sec', 'negative'],
  ],
  [
    ['sin', 'negative', 'cos', 'negative'],
    ['sin', 'negative', 'sec', 'negative'],
    ['sin', 'negative', 'tan', 'positive'],
    ['sin', 'negative', 'cot', 'positive'],
    ['csc', 'positive', 'cos', 'positive'],
    ['csc', 'negative', 'sec', 'negative'],
    ['csc', 'negative', 'tan', 'positive'],
    ['csc', 'negative', 'cot', 'positive'],
    ['cos', 'negative', 'sin', 'negative'],
    ['cos', 'negative', 'csc', 'negative'],
    ['cos', 'negative', 'tan', 'positive'],
    ['cos', 'negative', 'cot', 'positive'],
    ['sec', 'negative', 'sin', 'negative'],
    ['sec', 'negative', 'csc', 'negative'],
    ['sec', 'negative', 'tan', 'positive'],
    ['sec', 'negative', 'cot', 'positive'],
    ['tan', 'positive', 'sin', 'negative'],
    ['tan', 'positive', 'csc', 'negative'],
    ['tan', 'positive', 'cos', 'negative'],
    ['tan', 'positive', 'sec', 'negative'],
    ['cot', 'positive', 'sin', 'negative'],
    ['cot', 'positive', 'csc', 'negative'],
    ['cot', 'positive', 'cos', 'negative'],
    ['cot', 'positive', 'sec', 'negative'],
  ],
  [
    ['sin', 'negative', 'cos', 'positive'],
    ['sin', 'negative', 'sec', 'positive'],
    ['sin', 'negative', 'tan', 'negative'],
    ['sin', 'negative', 'cot', 'negative'],
    ['csc', 'negative', 'cos', 'positive'],
    ['csc', 'negative', 'sec', 'positive'],
    ['csc', 'negative', 'tan', 'negative'],
    ['csc', 'negative', 'cot', 'negative'],
    ['cos', 'positive', 'sin', 'negative'],
    ['cos', 'positive', 'csc', 'negative'],
    ['cos', 'positive', 'tan', 'negative'],
    ['cos', 'positive', 'cot', 'negative'],
    ['sec', 'positive', 'sin', 'negative'],
    ['sec', 'positive', 'csc', 'negative'],
    ['sec', 'positive', 'tan', 'negative'],
    ['sec', 'positive', 'cot', 'negative'],
    ['tan', 'negative', 'sin', 'negative'],
    ['tan', 'negative', 'csc', 'negative'],
    ['tan', 'negative', 'cos', 'positive'],
    ['tan', 'negative', 'sec', 'positive'],
    ['cot', 'negative', 'sin', 'negative'],
    ['cot', 'negative', 'csc', 'negative'],
    ['cot', 'negative', 'cos', 'positive'],
    ['cot', 'negative', 'sec', 'positive'],
  ],      
]

questions_ftr = [
  {'prompt': '$\\sin \\theta _1$', 'answer_options': [3, 4]}
]

formulas_ftr = {
  1: 'h / c',
  2: 'c / h',
  3: 'w / c',
  4: 'c / w',
  5: 'w / h',
  6: 'h / w'
}

